name: Document Review Reminder

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-review-dates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install pyyaml
        
    - name: Check for overdue reviews
      run: |
        python << 'EOF'
        import os
        import yaml
        import datetime
        from pathlib import Path
        
        def parse_yaml_frontmatter(file_path):
            """Parse YAML front-matter from Markdown file"""
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if not content.startswith('---'):
                    return None
                    
                # Find the end of front-matter
                end_marker = content.find('---', 3)
                if end_marker == -1:
                    return None
                    
                yaml_content = content[3:end_marker].strip()
                return yaml.safe_load(yaml_content)
            except Exception as e:
                print(f"Error parsing {file_path}: {e}")
                return None
        
        def check_document_reviews():
            """Check all documents for overdue reviews"""
            overdue_docs = []
            today = datetime.date.today()
            
            # Check policies directory
            policies_dir = Path('policies')
            if policies_dir.exists():
                for md_file in policies_dir.glob('*.md'):
                    if md_file.name.startswith('POL-'):
                        frontmatter = parse_yaml_frontmatter(md_file)
                        if frontmatter and 'next_review_date' in frontmatter:
                            try:
                                review_date = datetime.datetime.strptime(
                                    frontmatter['next_review_date'], '%Y-%m-%d'
                                ).date()
                                if review_date < today:
                                    overdue_docs.append({
                                        'file': str(md_file),
                                        'doc_id': frontmatter.get('doc_id', 'Unknown'),
                                        'title': frontmatter.get('title', 'Unknown'),
                                        'next_review_date': frontmatter['next_review_date'],
                                        'owner': frontmatter.get('owner', 'Unknown')
                                    })
                            except ValueError:
                                print(f"Invalid date format in {md_file}: {frontmatter['next_review_date']}")
            
            # Check standards-procedures directory
            std_proc_dir = Path('standards-procedures')
            if std_proc_dir.exists():
                for md_file in std_proc_dir.rglob('*.md'):
                    frontmatter = parse_yaml_frontmatter(md_file)
                    if frontmatter and 'next_review_date' in frontmatter:
                        try:
                            review_date = datetime.datetime.strptime(
                                frontmatter['next_review_date'], '%Y-%m-%d'
                            ).date()
                            if review_date < today:
                                overdue_docs.append({
                                    'file': str(md_file),
                                    'doc_id': frontmatter.get('doc_id', 'Unknown'),
                                    'title': frontmatter.get('title', 'Unknown'),
                                    'next_review_date': frontmatter['next_review_date'],
                                    'owner': frontmatter.get('owner', 'Unknown')
                                })
                        except ValueError:
                            print(f"Invalid date format in {md_file}: {frontmatter['next_review_date']}")
            
            return overdue_docs
        
        def create_or_update_issue(doc):
            """Create or update GitHub issue for overdue document"""
            import subprocess
            
            issue_title = f"DOC REVIEW DUE: {doc['doc_id']} - {doc['title']}"
            issue_body = f"""# Document Review Overdue

**Document**: {doc['doc_id']} - {doc['title']}
**File**: `{doc['file']}`
**Owner**: {doc['owner']}
**Review Due**: {doc['next_review_date']}
**Days Overdue**: {(datetime.date.today() - datetime.datetime.strptime(doc['next_review_date'], '%Y-%m-%d').date()).days}

## Required Actions
1. Review the document for accuracy and currency
2. Update version number if changes are made
3. Set new next_review_date
4. Update status if needed
5. Close this issue when review is complete

## Document Location
The document is located at: `{doc['file']}`

---
*This issue was automatically generated by the document review reminder workflow.*
"""
            
            # Check if issue already exists
            try:
                result = subprocess.run([
                    'gh', 'issue', 'list', '--search', f'"{issue_title}"', '--state', 'open'
                ], capture_output=True, text=True, check=True)
                
                if result.stdout.strip():
                    print(f"Issue already exists for {doc['doc_id']}")
                    return
                    
            except subprocess.CalledProcessError:
                print(f"Error checking for existing issue for {doc['doc_id']}")
                return
            
            # Create new issue
            try:
                subprocess.run([
                    'gh', 'issue', 'create',
                    '--title', issue_title,
                    '--body', issue_body,
                    '--label', 'documentation,review,overdue'
                ], check=True)
                print(f"Created issue for {doc['doc_id']}")
            except subprocess.CalledProcessError as e:
                print(f"Error creating issue for {doc['doc_id']}: {e}")
        
        # Main execution
        overdue_docs = check_document_reviews()
        
        if overdue_docs:
            print(f"Found {len(overdue_docs)} overdue documents:")
            for doc in overdue_docs:
                print(f"- {doc['doc_id']}: {doc['title']} (due {doc['next_review_date']})")
                create_or_update_issue(doc)
        else:
            print("No overdue documents found")
        
        # Set output for summary
        with open('$GITHUB_OUTPUT', 'a') as f:
            f.write(f'overdue_count={len(overdue_docs)}\n')
        EOF
        
    - name: Summary
      run: |
        echo "Document review check completed"
        echo "Check the Issues tab for any overdue document reminders"
